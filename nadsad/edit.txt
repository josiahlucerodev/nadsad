	template<> struct Serialize<ui8> {
		template<typename Serializer>
		constexpr static void as(Serializer& serializer) noexcept {
			serializer.asUI8();
		}
		template<typename Serializer>
		constexpr static void write(Serializer& serializer, const ui8 value) noexcept {
			serializer.writeUI8(value);
		}
	};
	template<> struct Serialize<ui16> {
		template<typename Serializer>
		constexpr static void as(Serializer& serializer) noexcept {
			serializer.asUI16();
		}
		template<typename Serializer>
		constexpr static void write(Serializer& serializer, const ui16 value) noexcept {
			serializer.writeUI16(value);
		}
	};
	template<> struct Serialize<ui32> {
		template<typename Serializer>
		constexpr static void as(Serializer& serializer) noexcept {
			serializer.asUI32();
		}
		template<typename Serializer>
		constexpr static void write(Serializer& serializer, const ui32 value) noexcept {
			serializer.writeUI32(value);
		}
	};
	template<> struct Serialize<ui64> {
		template<typename Serializer>
		constexpr static void as(Serializer& serializer) noexcept {
			serializer.asUI64();
		}
		template<typename Serializer>
		constexpr static void write(Serializer& serializer, const ui64 value) noexcept {
			serializer.writeUI64(value);
		}
	};